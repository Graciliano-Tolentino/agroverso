# ==============================================================================
# üå± Agroverso ‚Äì Arquivo de Vari√°veis de Ambiente (.env.example)
# üìÅ Local: raiz do diret√≥rio frontend/
# üß† Finalidade: configurar o comportamento do frontend para ambientes:
#     ‚Ä¢ development  (desenvolvimento local)
#     ‚Ä¢ staging      (homologa√ß√£o/valida√ß√£o)
#     ‚Ä¢ production   (produ√ß√£o real)
# üí° Este arquivo √© um modelo. Nunca armazene segredos ou dados reais aqui.
# ==============================================================================


# ------------------------------------------------------------------------------
# ‚úÖ ATIVAR MODO DEMONSTRA√á√ÉO (fake data)
# ------------------------------------------------------------------------------
# true  ‚Üí O frontend simula dados usando arquivos locais JSON (sem backend)
# false ‚Üí O frontend faz chamadas reais para a API definida abaixo
VITE_ENABLE_FAKE_DATA=true


# ------------------------------------------------------------------------------
# üåê URL BASE DA API BACKEND
# ------------------------------------------------------------------------------
# Usada quando VITE_ENABLE_FAKE_DATA=false. Deve apontar para a API real:
#   http://localhost:3000     ‚Üí desenvolvimento local
#   https://api-staging.agroverso.tec.br ‚Üí staging/homologa√ß√£o
#   https://api.agroverso.tec.br         ‚Üí produ√ß√£o real
VITE_API_BASE_URL=http://localhost:3000


# ------------------------------------------------------------------------------
# üß© CONTROLE DE FUNCIONALIDADES (Feature Toggles)
# ------------------------------------------------------------------------------
# Permite ativar funcionalidades espec√≠ficas, mesmo fora do modo fake
# Exemplo: permitir emiss√£o de certificados simulados mesmo com API ativa
VITE_USE_MOCK_CERTIFICATES=false


# ------------------------------------------------------------------------------
# üß≠ DEFINI√á√ÉO DO AMBIENTE L√ìGICO (dev | staging | production)
# ------------------------------------------------------------------------------
# √ötil para adaptar comportamentos internos, logs, exibi√ß√£o de avisos ou seguran√ßa
# Exemplo de uso: ocultar logs em produ√ß√£o, ativar mocks em staging, etc.
VITE_ENVIRONMENT=development

# ------------------------------------------------------------------------------
# üåç URL P√öBLICA DA APLICA√á√ÉO (usada em QR Codes, links absolutos, SEO, etc.)
# ------------------------------------------------------------------------------
# Define a URL raiz utilizada para constru√ß√£o de links externos ou p√∫blicos
# Esta vari√°vel √© cr√≠tica para QR Codes, certificados e funcionalidades externas
# Exemplo:
#   http://localhost:5173
#   https://agroverso.tec.br
VITE_PUBLIC_URL=http://localhost:5173


# ------------------------------------------------------------------------------
# ‚öôÔ∏è ATIVA√á√ÉO EXPL√çCITA DO SERVICE WORKER (PWA)
# ------------------------------------------------------------------------------
# true  ‚Üí registra o service worker (para permitir uso offline e cache avan√ßado)
# false ‚Üí n√£o registra o service worker (modo tradicional)
# Recomendado deixar false em staging para evitar cache persistente
VITE_SW_ENABLED=true


# ------------------------------------------------------------------------------
# üìä INTEGRA√á√ÉO COM FERRAMENTAS DE ANALYTICS
# ------------------------------------------------------------------------------
# Pode ser Google Analytics, Plausible, PostHog, Matomo ou outra plataforma
# Valor t√≠pico: UA-XXXXXXXXX-X (Google Analytics Universal)
# Para GA4, usar G-XXXXXXXXX
# Deixe em branco se n√£o utilizar
VITE_ANALYTICS_ID=

# ------------------------------------------------------------------------------
# ‚ö†Ô∏è AVISOS E CONDUTAS DE SEGURAN√áA
# ------------------------------------------------------------------------------
# - Nunca inclua tokens, senhas, chaves secretas ou credenciais neste arquivo.
# - Este arquivo deve ser versionado como refer√™ncia, mas o `.env` real nunca deve.
# - Vari√°veis com dados sens√≠veis (como chaves privadas) devem ser armazenadas apenas:
#     ‚Ä¢ em sistemas de secrets (Vercel, GitHub Actions, Docker secrets, etc.)
#     ‚Ä¢ no ambiente de execu√ß√£o da aplica√ß√£o (CI, server)
# - O conte√∫do aqui √© voltado exclusivamente √† configura√ß√£o segura e p√∫blica do frontend.


# ------------------------------------------------------------------------------
# ‚úÖ INSTRU√á√ïES DE USO
# ------------------------------------------------------------------------------
# Para configurar seu ambiente local de forma segura e r√°pida:
#
# 1. Copie este arquivo:
#    cp .env.example .env
#
# 2. Edite os valores conforme seu ambiente:
#    - Em dev, mantenha VITE_ENABLE_FAKE_DATA=true e API local
#    - Em staging ou produ√ß√£o, defina a URL correta da API e desative os mocks
#
# 3. Em produ√ß√£o, certifique-se de definir:
#    VITE_ENVIRONMENT=production
#    VITE_SW_ENABLED=true
#    VITE_ENABLE_FAKE_DATA=false


# ------------------------------------------------------------------------------
# üîç INTEGRA√á√ÉO COM AUDITORIA AUTOM√ÅTICA EM PIPELINES
# ------------------------------------------------------------------------------
# Recomendado: adicionar verifica√ß√£o de vari√°veis obrigat√≥rias no CI/CD
#
# Ferramenta: dotenv-linter
# Instala√ß√£o:
#    cargo install dotenv-linter
#
# Uso:
#    dotenv-linter .env.example .env
#
# Alternativa: script Node customizado para valida√ß√£o:
# check-env.js
# --------------------------------------------------------------------------
# const required = ['VITE_API_BASE_URL', 'VITE_ENABLE_FAKE_DATA'];
# const dotenv = require('dotenv');
# dotenv.config();
# const missing = required.filter((key) => !process.env[key]);
# if (missing.length > 0) {
#   console.error('‚ùå Vari√°veis ausentes:', missing.join(', '));
#   process.exit(1);
# }
# --------------------------------------------------------------------------
#
# E no package.json:
# {
#   "scripts": {
#     "check-env": "node check-env.js"
#   }
# }
#
# Comando:
#    npm run check-env

