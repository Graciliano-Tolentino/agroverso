#!/bin/bash

# ==============================================================================
# üßπ clean.sh | Agroverso ‚Äì Script de Limpeza Automatizada de Projeto Frontend
# üìÅ Local: raiz do frontend (agroverso/frontend)
# üîê Seguran√ßa integrada | üìú Logging com timestamp | üåø Arquitetura modular
# ‚ú® Desenvolvido com sabedoria, for√ßa e beleza
# ==============================================================================

# üõ°Ô∏è Valida√ß√£o de diret√≥rio correto (prote√ß√£o contra execu√ß√µes indevidas)
dir_name=$(basename "$PWD")
if [ "$dir_name" != "frontend" ] || [ ! -f "package.json" ]; then
  echo "‚ùå Este script deve ser executado DENTRO do diret√≥rio 'frontend' do projeto Agroverso."
  exit 1
fi

# üóÇÔ∏è Logging com timestamp ISO em cada linha (stdout + log persistente)
exec > >(awk '{ print strftime("[%Y-%m-%dT%H:%M:%S%z]"), $0; fflush(); }' | tee -a clean.log) 2>&1

echo "üîç Iniciando limpeza do frontend Agroverso..."

# ==============================================================================
# üß© Fun√ß√µes reutiliz√°veis ‚Äì sabedoria aplicada √† estrutura
# ==============================================================================

# üîÅ remove_item: Remove um item (arquivo ou diret√≥rio) com feedback sem√¢ntico
remove_item() {
  local target="$1"
  if [ -e "$target" ]; then
    if rm -rf "$target" 2>/dev/null; then
      echo "üöÆ Removido: $target"
    else
      echo "‚ö†Ô∏è Falha ao remover: $target"
    fi
  else
    echo "‚ÑπÔ∏è N√£o encontrado: $target"
  fi
}

# üîÅ clean_list: Aplica remove_item a uma lista nomeada de arquivos/diret√≥rios
clean_list() {
  local label="$1"
  shift
  local items=("$@")
  echo "üì¶ Limpando: $label"
  for item in "${items[@]}"; do
    remove_item "$item"
  done
}

# üîç scan_and_clean_system_files: Varre o sistema e remove arquivos por nome
scan_and_clean_system_files() {
  local filename="$1"
  local count=0

  while IFS= read -r file; do
    if rm -f "$file" 2>/dev/null; then
      echo "üßπ Removido: $file"
      ((count++))
    else
      echo "‚ö†Ô∏è Falha ao remover: $file"
    fi
  done < <(find . -type f -name "$filename")

  if [ "$count" -gt 0 ]; then
    echo "‚úÖ $count arquivos $filename removidos"
  else
    echo "‚ÑπÔ∏è Nenhum arquivo $filename encontrado"
  fi
}

# ==============================================================================
# üöÄ Execu√ß√£o das rotinas de limpeza com fun√ß√µes reutiliz√°veis
# ==============================================================================

# üìÅ 1. Diret√≥rios de controle de vers√£o
clean_list "Controle de Vers√£o" ".git"

# üìÑ 2. Arquivos redundantes e sup√©rfluos
clean_list "Arquivos Sup√©rfluos" \
  ".gitignore" \
  ".env.exemple" \
  "package.notes.md" \
  "Vercel.json"

# üì¶ 3. Pastas de build e depend√™ncias locais
clean_list "Build e Depend√™ncias Locais" \
  "node_modules" \
  "dist" \
  "build" \
  ".eslintcache"

# üßº 4. Arquivos do sistema (macOS/Windows)
scan_and_clean_system_files ".DS_Store"
scan_and_clean_system_files "Thumbs.db"

# ==============================================================================
# üéØ Encerramento com assinatura simb√≥lica Agroverso
# ==============================================================================

echo ""
echo "‚úÖ Limpeza conclu√≠da com sucesso!"
echo "üìÇ Diret√≥rio atual: $(pwd)"
echo "üóÇÔ∏è  Log completo salvo em: clean.log"
echo "üìÖ Data e hora de execu√ß√£o: $(date '+%Y-%m-%d %H:%M:%S')"
echo "‚ú® Obrigado por manter o projeto Agroverso limpo, modular e belo."

# üõë Fim do script
exit 0
